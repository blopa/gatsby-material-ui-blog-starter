{"version":3,"sources":["webpack:///./src/utils/gatsby-frontend-helpers.js","webpack:///./src/components/PostsList.jsx","webpack:///./src/pages/Blog.jsx"],"names":["getFormatedDateForLanguage","ISO8601date","language","dateStyle","Date","toLocaleDateString","useStyles","makeStyles","theme","blogPostWrapper","padding","PostsList","className","posts","quantity","locale","postsLoop","slice","classes","map","node","title","frontmatter","fields","slug","key","Typography","color","variant","Link","blogPostLink","to","path","component","date","excerpt","blogPostsText","margin","postsListWrapper","marginBottom","archiveText","pageQuery","Blog","data","location","siteTitle","site","siteMetadata","allMarkdownRemark","edges","intl","useIntl","Layout","SEO","lang","formatMessage","id","keywords"],"mappings":"2FAAA,kCACO,IAAMA,EAA6B,SAACC,EAAaC,EAAUC,GAG9D,YAHqF,IAAvBA,MAAY,QAC7D,IAAIC,KAAKH,GAEVI,mBAAmBH,EAAU,CAAEC,gB,gMCIzCG,EAAYC,YAAYC,IAAD,CACzBC,gBAAiB,CACbC,QAAS,YA2DFC,EAvDI,IAKZ,IALY,UACfC,EADe,MAEfC,EAFe,SAGfC,EAHe,OAIfC,GACE,EACEC,EAAYH,EACZC,IACAE,EAAYH,EAAMI,MAAM,EAAGH,IAE/B,IAAMI,EAAUZ,IAEhB,OACI,yBAAKM,UAAWA,GACXI,EAAUG,IAAK,IAAc,IAAd,KAAEC,GAAW,EACnBC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACI,6BACIC,IAAKL,EAAKG,OAAOC,KACjBZ,UAAWM,EAAQT,iBAEnB,gCACI,kBAACiB,EAAA,EAAD,CACIC,MAAM,cACNC,QAAQ,MAER,kBAACC,EAAA,EAAD,CACIjB,UAAWM,EAAQY,aACnBH,MAAM,cACNI,GAAIX,EAAKG,OAAOS,KAChBC,UAAWJ,KAEVR,IAGT,kBAACK,EAAA,EAAD,CACIC,MAAM,gBACNC,QAAQ,QACRK,UAAU,SAETjC,YAA2BoB,EAAKE,YAAYY,KAAMnB,KAG3D,iCACI,4BACKK,EAAKe,eChDhC7B,EAAYC,YAAYC,IAAD,CACzB4B,cAAe,CACXC,OAAQ,UAEZC,iBAAkB,CACdC,aAAc,QAElBC,YAAa,CACT9B,QAAS,aAgEJ+B,GAFEC,UA1DD,IAAwB,IAAxB,KAAEC,EAAF,SAAQC,GAAe,EAC3BC,EAAYF,EAAKG,KAAKC,aAAa1B,MACnCR,EAAQ8B,EAAKK,kBAAkBC,MAC/BC,EAAOC,oBACPjC,EAAUZ,IAEhB,OACI,kBAAC8C,EAAA,EAAD,CAAQR,SAAUA,EAAUvB,MAAOwB,GAC/B,kBAACQ,EAAA,EAAD,CACIC,KAAMJ,EAAKnC,OACXM,MAAO6B,EAAKK,cAAc,CAAEC,GAAI,SAChCC,SAAU,CACNP,EAAKK,cAAc,CAAEC,GAAI,2BACzBN,EAAKK,cAAc,CAAEC,GAAI,6BACzBN,EAAKK,cAAc,CAAEC,GAAI,4BACzBN,EAAKK,cAAc,CAAEC,GAAI,qBACzBN,EAAKK,cAAc,CAAEC,GAAI,2BAGjC,kBAAC9B,EAAA,EAAD,CACId,UAAWM,EAAQkB,cACnBT,MAAM,cACNC,QAAQ,MAEPsB,EAAKK,cAAc,CAAEC,GAAI,gBAE9B,kBAAC,EAAD,CACI5C,UAAWM,EAAQoB,iBACnBzB,MAAOA,EACPE,OAAQmC,EAAKnC,OACbD,SAAU,KAEd,kBAACe,EAAA,EAAD,CAAME,GAAG,YACL,kBAACL,EAAA,EAAD,CACIC,MAAM,cACNC,QAAQ,YAEPsB,EAAKK,cAAc,CAAEC,GAAI,gBAuBxB","file":"component---src-pages-blog-jsx-58eeee18dd0e62b7adc4.js","sourcesContent":["// eslint-disable-next-line import/prefer-default-export\r\nexport const getFormatedDateForLanguage = (ISO8601date, language, dateStyle = 'long') => {\r\n    const date = new Date(ISO8601date);\r\n\r\n    return date.toLocaleDateString(language, { dateStyle });\r\n};\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getFormatedDateForLanguage } from '../utils/gatsby-frontend-helpers';\r\n\r\n// Components\r\nimport Link from './Link';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    blogPostWrapper: {\r\n        padding: '5px 0',\r\n    },\r\n}));\r\n\r\nconst PostsList = ({\r\n    className,\r\n    posts,\r\n    quantity,\r\n    locale,\r\n}) => {\r\n    let postsLoop = posts;\r\n    if (quantity) {\r\n        postsLoop = posts.slice(0, quantity);\r\n    }\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={className}>\r\n            {postsLoop.map(({ node }) => {\r\n                const title = node.frontmatter.title || node.fields.slug;\r\n                return (\r\n                    <article\r\n                        key={node.fields.slug}\r\n                        className={classes.blogPostWrapper}\r\n                    >\r\n                        <header>\r\n                            <Typography\r\n                                color=\"textPrimary\"\r\n                                variant=\"h5\"\r\n                            >\r\n                                <Link\r\n                                    className={classes.blogPostLink}\r\n                                    color=\"textPrimary\"\r\n                                    to={node.fields.path}\r\n                                    component={Link}\r\n                                >\r\n                                    {title}\r\n                                </Link>\r\n                            </Typography>\r\n                            <Typography\r\n                                color=\"textSecondary\"\r\n                                variant=\"body2\"\r\n                                component=\"small\"\r\n                            >\r\n                                {getFormatedDateForLanguage(node.frontmatter.date, locale)}\r\n                            </Typography>\r\n                        </header>\r\n                        <section>\r\n                            <em>\r\n                                {node.excerpt}\r\n                            </em>\r\n                        </section>\r\n                    </article>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostsList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'gatsby-plugin-intl';\r\nimport { graphql } from 'gatsby';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport Link from '../components/Link';\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/SEO';\r\nimport PostsList from '../components/PostsList';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    blogPostsText: {\r\n        margin: '10px 0',\r\n    },\r\n    postsListWrapper: {\r\n        marginBottom: '10px',\r\n    },\r\n    archiveText: {\r\n        padding: '10px 0',\r\n    },\r\n}));\r\n\r\nconst Blog = ({ data, location }) => {\r\n    const siteTitle = data.site.siteMetadata.title;\r\n    const posts = data.allMarkdownRemark.edges;\r\n    const intl = useIntl();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Layout location={location} title={siteTitle}>\r\n            <SEO\r\n                lang={intl.locale}\r\n                title={intl.formatMessage({ id: 'blog' })}\r\n                keywords={[\r\n                    intl.formatMessage({ id: 'seo_keywords.developer' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.development' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.javascript' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.es6' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.gatsby' }),\r\n                ]}\r\n            />\r\n            <Typography\r\n                className={classes.blogPostsText}\r\n                color=\"textPrimary\"\r\n                variant=\"h4\"\r\n            >\r\n                {intl.formatMessage({ id: 'blog_posts' })}\r\n            </Typography>\r\n            <PostsList\r\n                className={classes.postsListWrapper}\r\n                posts={posts}\r\n                locale={intl.locale}\r\n                quantity={10}\r\n            />\r\n            <Link to=\"/archive\">\r\n                <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"overline\"\r\n                >\r\n                    {intl.formatMessage({ id: 'archive' })}\r\n                </Typography>\r\n            </Link>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nBlog.propTypes = {\r\n    location: PropTypes.object.isRequired,\r\n    data: PropTypes.shape({\r\n        allMarkdownRemark: PropTypes.shape({\r\n            edges: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n        }).isRequired,\r\n        site: PropTypes.shape({\r\n            siteMetadata: PropTypes.shape({\r\n                title: PropTypes.string.isRequired,\r\n            }).isRequired,\r\n        }).isRequired,\r\n    }).isRequired,\r\n};\r\n\r\nexport default Blog;\r\n\r\nexport const pageQuery = graphql`\r\n    query Blog($locale: String) {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            filter: {\r\n                fields: { locale: { eq: $locale } }\r\n                frontmatter: { show: {eq: true} }\r\n            }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n        ) {\r\n            edges {\r\n                node {\r\n                    excerpt(pruneLength: 60)\r\n                    fields {\r\n                        slug\r\n                        path\r\n                        locale\r\n                    }\r\n                    frontmatter {\r\n                        date\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n"],"sourceRoot":""}