{"version":3,"sources":["webpack:///./src/utils/gatsby-frontend-helpers.js","webpack:///./src/components/SimplePostsList.jsx","webpack:///./src/pages/Home.jsx","webpack:///./src/pages/index.js"],"names":["getFormatedDateForLanguage","ISO8601date","language","Date","toLocaleDateString","dateStyle","useStyles","makeStyles","theme","blogPostWrapper","padding","SimplePostsList","className","posts","quantity","locale","postsLoop","slice","classes","map","node","title","frontmatter","fields","slug","key","Typography","color","variant","Link","blogPostLink","to","path","blogPostDate","date","simplePostsListWrapper","marginBottom","recentPostsText","margin","projectsText","seeMoreText","HomePage","props","graphqlResults","data","location","allMarkdownRemark","edges","intl","useIntl","Layout","SEO","lang","formatMessage","id","keywords","pageQuery","gatsbyEntryPoint","React","createElement"],"mappings":"2FAAA,kCACO,IAAMA,EAA6B,CAACC,EAAaC,IACvC,IAAIC,KAAKF,GAEVG,mBAAmBF,EAAU,CAAEG,UAAW,U,gMCIpDC,EAAYC,YAAYC,IAAD,CACzBC,gBAAiB,CACbC,QAAS,YAqDFC,EAjDU,IAKlB,IALkB,UACrBC,EADqB,MAErBC,EAFqB,SAGrBC,EAHqB,OAIrBC,GACE,EACEC,EAAYH,EACZC,IACAE,EAAYH,EAAMI,MAAM,EAAGH,IAE/B,IAAMI,EAAUZ,IAEhB,OACI,yBAAKM,UAAWA,GACXI,EAAUG,IAAK,IAAc,IAAd,KAAEC,GAAW,EACnBC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACI,6BACIC,IAAKL,EAAKG,OAAOC,KACjBZ,UAAWM,EAAQT,iBAEnB,gCACI,kBAACiB,EAAA,EAAD,CACIC,MAAM,cACNC,QAAQ,MAER,kBAACC,EAAA,EAAD,CACIjB,UAAWM,EAAQY,aACnBH,MAAM,cACNI,GAAIX,EAAKG,OAAOS,MAEfX,IAGT,kBAACK,EAAA,EAAD,CACId,UAAWM,EAAQe,aACnBN,MAAM,gBACNC,QAAQ,SAEP5B,YAA2BoB,EAAKE,YAAYY,KAAMnB,UC1C7ET,EAAYC,YAAYC,IAAD,CACzB2B,uBAAwB,CACpBC,aAAc,QAElBC,gBAAiB,CACbC,OAAQ,UAEZC,aAAc,CACVD,OAAQ,UAEZE,YAAa,CACT9B,QAAS,aAkDF+B,EA9CGC,IACd,IAAM,eAAEC,GAAmBD,GACrB,KAAEE,EAAF,SAAQC,GAAaF,EACrB9B,EAAQ+B,EAAKE,kBAAkBC,MAE/B7B,EAAUZ,IACV0C,EAAOC,oBAEb,OACI,kBAACC,EAAA,EAAD,CAAQL,SAAUA,GACd,kBAACM,EAAA,EAAD,CACIC,KAAMJ,EAAKjC,OACXM,MAAO2B,EAAKK,cAAc,CAAEC,GAAI,SAChCC,SAAU,CACNP,EAAKK,cAAc,CAAEC,GAAI,2BACzBN,EAAKK,cAAc,CAAEC,GAAI,6BACzBN,EAAKK,cAAc,CAAEC,GAAI,4BACzBN,EAAKK,cAAc,CAAEC,GAAI,qBACzBN,EAAKK,cAAc,CAAEC,GAAI,2BAGjC,kBAAC5B,EAAA,EAAD,CACId,UAAWM,EAAQmB,gBACnBV,MAAM,cACNC,QAAQ,MAEPoB,EAAKK,cAAc,CAAEC,GAAI,kBAE9B,kBAAC,EAAD,CACI1C,UAAWM,EAAQiB,uBACnBtB,MAAOA,EACPC,SAAU,EACVC,OAAQiC,EAAKjC,SAEjB,kBAACc,EAAA,EAAD,CAAME,GAAG,SACL,kBAACL,EAAA,EAAD,CACIC,MAAM,cACNC,QAAQ,YAEPoB,EAAKK,cAAc,CAAEC,GAAI,iBCtDjCE,GAFEC,UAFWd,GAAoBe,IAAMC,cAAclB,EAAU,CAAEE,mBAIxD","file":"component---src-pages-index-js-209c596491ec8f64d2fd.js","sourcesContent":["// eslint-disable-next-line import/prefer-default-export\r\nexport const getFormatedDateForLanguage = (ISO8601date, language) => {\r\n    const date = new Date(ISO8601date);\r\n\r\n    return date.toLocaleDateString(language, { dateStyle: 'long' });\r\n};\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getFormatedDateForLanguage } from '../utils/gatsby-frontend-helpers';\r\n\r\n// Components\r\nimport Link from './Link';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    blogPostWrapper: {\r\n        padding: '5px 0',\r\n    },\r\n}));\r\n\r\nconst SimplePostsList = ({\r\n    className,\r\n    posts,\r\n    quantity,\r\n    locale,\r\n}) => {\r\n    let postsLoop = posts;\r\n    if (quantity) {\r\n        postsLoop = posts.slice(0, quantity);\r\n    }\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={className}>\r\n            {postsLoop.map(({ node }) => {\r\n                const title = node.frontmatter.title || node.fields.slug;\r\n                return (\r\n                    <article\r\n                        key={node.fields.slug}\r\n                        className={classes.blogPostWrapper}\r\n                    >\r\n                        <header>\r\n                            <Typography\r\n                                color=\"textPrimary\"\r\n                                variant=\"h6\"\r\n                            >\r\n                                <Link\r\n                                    className={classes.blogPostLink}\r\n                                    color=\"textPrimary\"\r\n                                    to={node.fields.path}\r\n                                >\r\n                                    {title}\r\n                                </Link>\r\n                            </Typography>\r\n                            <Typography\r\n                                className={classes.blogPostDate}\r\n                                color=\"textSecondary\"\r\n                                variant=\"body2\"\r\n                            >\r\n                                {getFormatedDateForLanguage(node.frontmatter.date, locale)}\r\n                            </Typography>\r\n                        </header>\r\n                    </article>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SimplePostsList;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Divider, Typography } from '@material-ui/core';\r\nimport { useIntl } from 'gatsby-plugin-intl';\r\nimport SEO from '../components/SEO';\r\nimport Layout from '../components/Layout';\r\n\r\n// Components\r\nimport Link from '../components/Link';\r\nimport SimplePostsList from '../components/SimplePostsList';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    simplePostsListWrapper: {\r\n        marginBottom: '10px',\r\n    },\r\n    recentPostsText: {\r\n        margin: '10px 0',\r\n    },\r\n    projectsText: {\r\n        margin: '10px 0',\r\n    },\r\n    seeMoreText: {\r\n        padding: '10px 0',\r\n    },\r\n}));\r\n\r\nconst HomePage = (props) => {\r\n    const { graphqlResults } = props;\r\n    const { data, location } = graphqlResults;\r\n    const posts = data.allMarkdownRemark.edges;\r\n    // const posts = [];\r\n    const classes = useStyles();\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <Layout location={location}>\r\n            <SEO\r\n                lang={intl.locale}\r\n                title={intl.formatMessage({ id: 'home' })}\r\n                keywords={[\r\n                    intl.formatMessage({ id: 'seo_keywords.developer' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.development' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.javascript' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.es6' }),\r\n                    intl.formatMessage({ id: 'seo_keywords.gatsby' }),\r\n                ]}\r\n            />\r\n            <Typography\r\n                className={classes.recentPostsText}\r\n                color=\"textPrimary\"\r\n                variant=\"h4\"\r\n            >\r\n                {intl.formatMessage({ id: 'recent_posts' })}\r\n            </Typography>\r\n            <SimplePostsList\r\n                className={classes.simplePostsListWrapper}\r\n                posts={posts}\r\n                quantity={5}\r\n                locale={intl.locale}\r\n            />\r\n            <Link to=\"/blog\">\r\n                <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"overline\"\r\n                >\r\n                    {intl.formatMessage({ id: 'see_more' })}\r\n                </Typography>\r\n            </Link>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","// This file only exists as a entry point for Gatsby\r\n// Since we're writing jsx and using airbnb ESLint rules\r\n// We should not write jsx into a .js file\r\nimport { graphql } from 'gatsby';\r\nimport React from 'react';\r\nimport HomePage from './Home';\r\n\r\nconst gatsbyEntryPoint = (graphqlResults) => (React.createElement(HomePage, { graphqlResults }));\r\n\r\nexport default gatsbyEntryPoint;\r\n\r\nexport const pageQuery = graphql`\r\n    query Index($locale: String) {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            filter: {\r\n                fields: { locale: { eq: $locale } }\r\n                frontmatter: { show: {eq: true} }\r\n            }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n        ) {\r\n            edges {\r\n                node {\r\n                    excerpt\r\n                    fields {\r\n                        slug\r\n                        path\r\n                        locale\r\n                    }\r\n                    frontmatter {\r\n                        date\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n"],"sourceRoot":""}